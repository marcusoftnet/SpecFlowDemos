// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34003
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecsAndDemos._06CompareToAssist
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Show the compare to feature")]
    public partial class ShowTheCompareToFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CompareTo.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Show the compare to feature", "In order to show the compare to features of SpecFlow Assist\r\nAs a SpecFlow evangl" +
                    "ist\r\nI want to show how the different versions of compareTo works", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CompareToInstance")]
        public virtual void CompareToInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CompareToInstance", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Marcus"});
            table1.AddRow(new string[] {
                        "Style",
                        "Butch"});
            table1.AddRow(new string[] {
                        "Birth date",
                        "1972-10-09"});
#line 7
 testRunner.Given("I have the following person", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "Marcus"});
            table2.AddRow(new string[] {
                        "Style",
                        "Butch"});
            table2.AddRow(new string[] {
                        "BirthDate",
                        "1972-10-09"});
#line 12
 testRunner.Then("CompareToInstance should match this guy", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Marcus"});
            table3.AddRow(new string[] {
                        "BirthDate",
                        "1972-10-09"});
#line 17
 testRunner.And("CompareToInstance should match this guy", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        "Anders"});
            table4.AddRow(new string[] {
                        "Style",
                        "very cool"});
            table4.AddRow(new string[] {
                        "BirthDate",
                        "1972-10-09"});
#line 21
 testRunner.But("CompareToInstance should not match this guy", ((string)(null)), table4, "But ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CompareToSet")]
        public virtual void CompareToSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CompareToSet", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Style",
                        "Birth date",
                        "Salary"});
            table5.AddRow(new string[] {
                        "Marcus",
                        "Cool",
                        "1972-10-09",
                        "100"});
            table5.AddRow(new string[] {
                        "Anders",
                        "Butch",
                        "1977-01-01",
                        "100000"});
            table5.AddRow(new string[] {
                        "Jocke",
                        "Soft",
                        "1974-04-04",
                        "A lot, ok?"});
#line 30
 testRunner.Given("I have the following persons using assist", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Style",
                        "BirthDate"});
            table6.AddRow(new string[] {
                        "Marcus",
                        "Cool",
                        "1972-10-09"});
            table6.AddRow(new string[] {
                        "Anders",
                        "Butch",
                        "1977-01-01"});
            table6.AddRow(new string[] {
                        "Jocke",
                        "Soft",
                        "1974-04-04"});
#line 35
 testRunner.Then("CompareToSet should match this", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Style",
                        "BirthDate"});
            table7.AddRow(new string[] {
                        "Marcus",
                        "Cool",
                        "1972-10-09"});
            table7.AddRow(new string[] {
                        "Anders",
                        "Butch",
                        "1977-01-01"});
#line 40
 testRunner.But("CompareToSet should not match this", ((string)(null)), table7, "But ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
